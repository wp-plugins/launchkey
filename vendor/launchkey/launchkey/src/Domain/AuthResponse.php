<?php
/**
 * @author Adam Englander <adam@launchkey.com>
 * @copyright 2015 LaunchKey, Inc. See project license for usage.
 */

namespace LaunchKey\SDK\Domain;

/**
 * Value object representing an authentication/authorization response
 *
 * @package LaunchKey\SDK\Domain
 */
class AuthResponse
{
    /**
     * @var string auth_request value generated by the LaunchKey Engine API.
     */
    private $authRequestId;

    /**
     * @var boolean Has the authorization request completed.  The request is considered completed when the user
     * has accepted or rejected the authorization request.
     */
    private $completed;

    /**
     * @var boolean|null Has the request been authorized by the user.  Will be NULL if the request has not been
     * completed.
     */
    private $authorized;

    /**
     * @var string User hash for that identifies the LaunchKey user within the LaunchKey system regardless of
     * a username change.
     */
    private $userHash;

    /**
     * @var string Identifies a user across an organization.
     */
    private $organizationUserId;

    /**
     * @var string Identifies the user with the application.  This can be used for future authorization requests for
     * the application that was use in the authorization request.
     */
    private $userPushId;

    /**
     * @var null|string Unique identifier for the device with which the user responded to the request.
     */
    private $deviceId;

    /**
     * @param boolean $completed Has the authorization request completed.  Defaults to FALSE.
     * @param string $authRequestId auth_request value generated by the LaunchKey Engine API.
     * @param string $userHash User hash that identifies the user with the application
     * @param string $organizationUserId Identifies a user across an organization.
     * @param string $userPushId Identifies the user with the application.  This can be used for future authorization.
     * requests for the application that was use in the authorization request.
     * @param string $deviceId Unique identifier for the device that response to the auth request.
     * @param boolean|null $authorized Has the request been authorized by the user.  Will be NULL if the request has not
     * been completed.
     */
    public function __construct($completed = false, $authRequestId = null, $userHash = null, $organizationUserId = null, $userPushId = null, $deviceId = null, $authorized = null)
    {
        $this->authRequestId = $authRequestId;
        $this->userHash = $userHash;
        $this->organizationUserId = $organizationUserId;
        $this->userPushId = $userPushId;
        $this->completed = $completed;
        $this->deviceId = $deviceId;
        $this->authorized = $authorized;
    }

    /**
     * Get the auth_request value generated by the LaunchKey Engine API.
     *
     * @return string
     */
    public function getAuthRequestId()
    {
        return $this->authRequestId;
    }

    /**
     * Has the authorization request completed.  The request is considered completed when the user
     * has accepted or rejected the authorization request.
     *
     * @return boolean
     */
    public function isCompleted()
    {
        return $this->completed;
    }

    /**
     * Has the request been authorized by the user.  Will be NULL if the request has not been
     * completed.
     *
     * @return boolean|null
     */
    public function isAuthorized()
    {
        return $this->authorized;
    }

    /**
     * Get the permanent and unique user hash that identifies the user.
     *
     * @return string
     */
    public function getUserHash()
    {
        return $this->userHash;
    }

    /**
     * Get the ID which identifies a user across an organization.
     *
     * @return string
     */
    public function getOrganizationUserId()
    {
        return $this->organizationUserId;
    }

    /**
     * Get the identifier which identifies the user with the application.  This can be used for future authorization
     * requests for the application that was use in the authorization request.
     *
     * @return string
     */
    public function getUserPushId()
    {
        return $this->userPushId;
    }

    /**
     * Get the unique identifier for the device with which the user responded to the request.
     *
     * @return null|string
     */
    public function getDeviceId()
    {
        return $this->deviceId;
    }
}
